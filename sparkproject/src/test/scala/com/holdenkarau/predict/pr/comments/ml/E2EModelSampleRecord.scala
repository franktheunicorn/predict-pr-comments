package com.holdenkarau.predict.pr.comments.sparkProject.ml
object E2EModelSampleRecord {
  // This is designed to be a 
  // Note this record is modified to have the properties we want to test for.
  val record = (
    "{\r\n    \"pull_request_url\": \"\\\"https://api.github.com/repos/Dreamacro/clash/pulls/96\\\"\",\r\n    \"pull_patch_url\": \"\\\"https://github.com/Dreamacro/clash/pull/96.patch\\\"\",\r\n    \"created_date\": \"\\\"2019-01-20T03:05:35Z\\\"\",\r\n    \"diff_hunks\": [\r\n      \"\\\"@@ -33,15 +33,17 @@ type SourceType int\\\\n type Metadata struct {\\\\n \\\\tNetWork  NetWork\\\\n \\\\tSource   SourceType\\\\n+\\\\tSourceIP *net.IP\\\\n \\\\tAddrType int\\\\n \\\\tHost     string\\\\n \\\\tIP       *net.IP\\\\n \\\\tPort     string\\\\n }\\\\n \\\\n func (addr *Metadata) String() string {\\\"\",\r\n      \"\\\"@@ -9,18 +9,22 @@ import (\\\\n type IPCIDR struct {\\\\n \\\\tipnet   *net.IPNet\\\\n \\\\tadapter string\\\\n+\\\\tisFrom  bool\\\"\",\r\n      \"\\\"@@ -338,7 +338,9 @@ func parseRules(cfg *rawConfig) ([]C.Rule, error) {\\\\n \\\\t\\\\tcase \\\\\\\"GEOIP\\\\\\\":\\\\n \\\\t\\\\t\\\\trules = append(rules, R.NewGEOIP(payload, target))\\\\n \\\\t\\\\tcase \\\\\\\"IP-CIDR\\\\\\\", \\\\\\\"IP-CIDR6\\\\\\\":\\\\n-\\\\t\\\\t\\\\trules = append(rules, R.NewIPCIDR(payload, target))\\\\n+\\\\t\\\\t\\\\trules = append(rules, R.NewIPCIDR(payload, target, false))\\\\n+\\\\t\\\\tcase \\\\\\\"FROM-IP-CIDR\\\\\\\":\\\"\",\r\n      \"\\\"@@ -33,15 +33,20 @@ type SourceType int\\\\n type Metadata struct {\\\\n \\\\tNetWork  NetWork\\\\n \\\\tSource   SourceType\\\\n+\\\\tFromIP   *net.IP\\\\n \\\\tAddrType int\\\\n \\\\tHost     string\\\\n \\\\tIP       *net.IP\\\\n \\\\tPort     string\\\\n }\\\\n \\\\n func (addr *Metadata) String() string {\\\\n+\\\\tfromIP := \\\\\\\"\\\\\\\"\\\\n+\\\\tif addr.FromIP != nil {\\\"\",\r\n      \"\\\"@@ -9,18 +9,29 @@ import (\\\\n type IPCIDR struct {\\\\n \\\\tipnet   *net.IPNet\\\\n \\\\tadapter string\\\\n+\\\\tisFrom  bool\\\\n }\\\\n \\\\n func (i *IPCIDR) RuleType() C.RuleType {\\\\n-\\\\treturn C.IPCIDR\\\\n+\\\\tif i.isFrom {\\\"\",\r\n      \"\\\"@@ -9,18 +9,29 @@ import (\\\\n type IPCIDR struct {\\\\n \\\\tipnet   *net.IPNet\\\\n \\\\tadapter string\\\\n+\\\\tisFrom  bool\\\\n }\\\\n \\\\n func (i *IPCIDR) RuleType() C.RuleType {\\\\n-\\\\treturn C.IPCIDR\\\\n+\\\\tif i.isFrom {\\\\n+\\\\t\\\\treturn C.FromIPCIDR\\\\n+\\\\t} else {\\\\n+\\\\t\\\\treturn C.IPCIDR\\\\n+\\\\t}\\\\n }\\\\n \\\\n func (i *IPCIDR) IsMatch(metadata *C.Metadata) bool {\\\\n-\\\\tif metadata.IP == nil {\\\\n+\\\\tvar ip *net.IP\\\"\",\r\n      \"\\\"@@ -9,18 +9,29 @@ import (\\\\n type IPCIDR struct {\\\\n \\\\tipnet   *net.IPNet\\\\n \\\\tadapter string\\\\n+\\\\tisFrom  bool\\\\n }\\\\n \\\\n func (i *IPCIDR) RuleType() C.RuleType {\\\\n-\\\\treturn C.IPCIDR\\\\n+\\\\tif i.isFrom {\\\\n+\\\\t\\\\treturn C.FromIPCIDR\\\\n+\\\\t} else {\\\\n+\\\\t\\\\treturn C.IPCIDR\\\\n+\\\\t}\\\\n }\\\\n \\\\n func (i *IPCIDR) IsMatch(metadata *C.Metadata) bool {\\\\n-\\\\tif metadata.IP == nil {\\\\n+\\\\tvar ip *net.IP\\\\n+\\\\tif i.isFrom {\\\\n+\\\\t\\\\tip = metadata.FromIP\\\\n+\\\\t} else {\\\\n+\\\\t\\\\tip = metadata.IP\\\\n+\\\\t}\\\\n+\\\\tif ip == nil {\\\"\",\r\n      \"\\\"@@ -106,6 +106,20 @@ func (t *Tunnel) handleConn(localConn C.ServerAdapter) {\\\\n \\\\tdefer localConn.Close()\\\\n \\\\tmetadata := localConn.Metadata()\\\\n \\\\n+\\\\tvar ip net.IP\\\\n+\\\\tswitch adapter := localConn.(type) {\\\\n+\\\\tcase *InboundAdapter.HTTPAdapter:\\\\n+\\\\t\\\\tif addr, ok := adapter.Conn().RemoteAddr().(*net.TCPAddr); ok {\\\\n+\\\\t\\\\t\\\\tip = addr.IP\\\\n+\\\\t\\\\t}\\\\n+\\\\tcase *InboundAdapter.SocketAdapter:\\\\n+\\\\t\\\\tif addr, ok := adapter.Conn().RemoteAddr().(*net.TCPAddr); ok {\\\\n+\\\\t\\\\t\\\\tip = addr.IP\\\\n+\\\\t\\\\t}\\\\n+\\\\t}\\\\n+\\\\tmetadata.FromIP = &ip\\\"\",\r\n      \"\\\"@@ -33,15 +33,17 @@ type SourceType int\\\\n type Metadata struct {\\\\n \\\\tNetWork  NetWork\\\\n \\\\tSource   SourceType\\\\n+\\\\tFromIP   *net.IP\\\\n \\\\tAddrType int\\\\n \\\\tHost     string\\\\n \\\\tIP       *net.IP\\\\n \\\\tPort     string\\\\n }\\\\n \\\\n func (addr *Metadata) String() string {\\\\n+\\\\tfromIP := addr.FromIP.String() + \\\\\\\" --> \\\\\\\"\\\"\",\r\n      \"\\\"@@ -32,8 +32,10 @@ func (h *HTTPAdapter) Conn() net.Conn {\\\\n \\\\n // NewHTTP is HTTPAdapter generator\\\\n func NewHTTP(request *http.Request, conn net.Conn) *HTTPAdapter {\\\\n+\\\\tmetadata := parseHTTPAddr(request)\\\\n+\\\\tmetadata.FromIP = parseFromIP(conn)\\\"\",\r\n      \"\\\"@@ -33,15 +33,17 @@ type SourceType int\\\\n type Metadata struct {\\\\n \\\\tNetWork  NetWork\\\\n \\\\tSource   SourceType\\\\n+\\\\tFromIP   *net.IP\\\\n \\\\tAddrType int\\\\n \\\\tHost     string\\\\n \\\\tIP       *net.IP\\\\n \\\\tPort     string\\\\n }\\\\n \\\\n func (addr *Metadata) String() string {\\\\n+\\\\tfromIP := addr.FromIP.String() + \\\\\\\" --> \\\\\\\"\\\"\",\r\n      \"\\\"@@ -33,15 +33,17 @@ type SourceType int\\\\n type Metadata struct {\\\\n \\\\tNetWork  NetWork\\\\n \\\\tSource   SourceType\\\\n+\\\\tFromIP   *net.IP\\\\n \\\\tAddrType int\\\\n \\\\tHost     string\\\\n \\\\tIP       *net.IP\\\\n \\\\tPort     string\\\\n }\\\\n \\\\n func (addr *Metadata) String() string {\\\\n+\\\\tfromIP := addr.FromIP.String() + \\\\\\\" --> \\\\\\\"\\\"\",\r\n      \"\\\"@@ -32,8 +32,10 @@ func (h *HTTPAdapter) Conn() net.Conn {\\\\n \\\\n // NewHTTP is HTTPAdapter generator\\\\n func NewHTTP(request *http.Request, conn net.Conn) *HTTPAdapter {\\\\n+\\\\tmetadata := parseHTTPAddr(request)\\\\n+\\\\tmetadata.FromIP = parseFromIP(conn)\\\"\",\r\n      \"\\\"@@ -0,0 +1,42 @@\\\\n+package rules\\\\n+\\\\n+import (\\\\n+\\\\t\\\\\\\"net\\\\\\\"\\\\n+\\\\n+\\\\tC \\\\\\\"github.com/Dreamacro/clash/constant\\\\\\\"\\\\n+)\\\\n+\\\\n+type FromIPCIDR struct {\\\\n+\\\\tipnet   *net.IPNet\\\\n+\\\\tadapter string\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) RuleType() C.RuleType {\\\\n+\\\\treturn C.FromIPCIDR\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) IsMatch(metadata *C.Metadata) bool {\\\\n+\\\\tif metadata.FromIP == nil {\\\\n+\\\\t\\\\treturn false\\\\n+\\\\t}\\\\n+\\\\n+\\\\treturn i.ipnet.Contains(*metadata.FromIP)\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) Adapter() string {\\\\n+\\\\treturn i.adapter\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) Payload() string {\\\\n+\\\\treturn i.ipnet.String()\\\\n+}\\\\n+\\\\n+func NewFromIPCIDR(s string, adapter string) *FromIPCIDR {\\\\n+\\\\t_, ipnet, err := net.ParseCIDR(s)\\\\n+\\\\tif err != nil {\\\\n+\\\\t}\\\\n+\\\\treturn &FromIPCIDR{\\\\n+\\\\t\\\\tipnet:   ipnet,\\\\n+\\\\t\\\\tadapter: adapter,\\\\n+\\\\t}\\\\n+}\\\"\",\r\n      \"\\\"@@ -0,0 +1,42 @@\\\\n+package rules\\\\n+\\\\n+import (\\\\n+\\\\t\\\\\\\"net\\\\\\\"\\\\n+\\\\n+\\\\tC \\\\\\\"github.com/Dreamacro/clash/constant\\\\\\\"\\\\n+)\\\\n+\\\\n+type FromIPCIDR struct {\\\\n+\\\\tipnet   *net.IPNet\\\\n+\\\\tadapter string\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) RuleType() C.RuleType {\\\\n+\\\\treturn C.FromIPCIDR\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) IsMatch(metadata *C.Metadata) bool {\\\\n+\\\\tif metadata.FromIP == nil {\\\\n+\\\\t\\\\treturn false\\\\n+\\\\t}\\\\n+\\\\n+\\\\treturn i.ipnet.Contains(*metadata.FromIP)\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) Adapter() string {\\\\n+\\\\treturn i.adapter\\\\n+}\\\\n+\\\\n+func (i *FromIPCIDR) Payload() string {\\\\n+\\\\treturn i.ipnet.String()\\\\n+}\\\\n+\\\\n+func NewFromIPCIDR(s string, adapter string) *FromIPCIDR {\\\\n+\\\\t_, ipnet, err := net.ParseCIDR(s)\\\\n+\\\\tif err != nil {\\\\n+\\\\t}\\\\n+\\\\treturn &FromIPCIDR{\\\\n+\\\\t\\\\tipnet:   ipnet,\\\\n+\\\\t\\\\tadapter: adapter,\\\\n+\\\\t}\\\\n+}\\\"\"\r\n    ],\r\n    \"comment_positions\": [\r\n      {\r\n        \"original_position\": \"11\",\r\n        \"new_position\": \"11\"\r\n      },\r\n      {\r\n        \"original_position\": \"4\",\r\n        \"new_position\": \"4\"\r\n      },\r\n      {\r\n        \"original_position\": \"6\",\r\n        \"new_position\": \"6\"\r\n      },\r\n      {\r\n        \"original_position\": \"13\",\r\n        \"new_position\": \"13\"\r\n      },\r\n      {\r\n        \"original_position\": \"9\",\r\n        \"new_position\": \"9\"\r\n      },\r\n      {\r\n        \"original_position\": \"18\",\r\n        \"new_position\": \"18\"\r\n      },\r\n      {\r\n        \"original_position\": \"24\",\r\n        \"new_position\": \"24\"\r\n      },\r\n      {\r\n        \"original_position\": \"15\",\r\n        \"new_position\": \"15\"\r\n      },\r\n      {\r\n        \"original_position\": \"12\",\r\n        \"new_position\": null\r\n      },\r\n      {\r\n        \"original_position\": \"5\",\r\n        \"new_position\": \"5\"\r\n      },\r\n      {\r\n        \"original_position\": \"12\",\r\n        \"new_position\": \"12\"\r\n      },\r\n      {\r\n        \"original_position\": \"12\",\r\n        \"new_position\": \"12\"\r\n      },\r\n      {\r\n        \"original_position\": \"5\",\r\n        \"new_position\": null\r\n      },\r\n      {\r\n        \"original_position\": \"42\",\r\n        \"new_position\": null\r\n      },\r\n      {\r\n        \"original_position\": \"42\",\r\n        \"new_position\": \"42\"\r\n      }\r\n    ],\r\n    \"comment_commit_ids\": [\r\n      \"\\\"5bdac33935f10137ae726c44dea6737ec7ab520a\\\"\",\r\n      \"\\\"5bdac33935f10137ae726c44dea6737ec7ab520a\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"5bdac33935f10137ae726c44dea6737ec7ab520a\\\"\",\r\n      \"\\\"a2a5422536489150b44f1b7fe2d76359664f03f3\\\"\",\r\n      \"\\\"a2a5422536489150b44f1b7fe2d76359664f03f3\\\"\",\r\n      \"\\\"a2a5422536489150b44f1b7fe2d76359664f03f3\\\"\",\r\n      \"\\\"5bdac33935f10137ae726c44dea6737ec7ab520a\\\"\",\r\n      \"\\\"0b44c7a83aa400caf5db40975a75428682431309\\\"\",\r\n      \"\\\"de976981dff604f3f41167012ddb82b3e0c90e6d\\\"\"\r\n    ],\r\n    \"comment_file_paths\": [\r\n      \"\\\"constant/metadata.go\\\"\",\r\n      \"\\\"rules/ipcidr.go\\\"\",\r\n      \"\\\"config/config.go\\\"\",\r\n      \"\\\"constant/metadata.go\\\"\",\r\n      \"\\\"rules/ipcidr.go\\\"\",\r\n      \"\\\"rules/ipcidr.go\\\"\",\r\n      \"\\\"rules/ipcidr.go\\\"\",\r\n      \"\\\"tunnel/tunnel.go\\\"\",\r\n      \"\\\"constant/metadata.go\\\"\",\r\n      \"\\\"adapters/inbound/http.go\\\"\",\r\n      \"\\\"constant/metadata.go\\\"\",\r\n      \"\\\"constant/metadata.go\\\"\",\r\n      \"\\\"adapters/inbound/http.go\\\"\",\r\n      \"\\\"rules/from_ipcidr.go\\\"\",\r\n      \"\\\"rules/from_ipcidr.go\\\"\"\r\n    ]\r\n  }"
  )

}
